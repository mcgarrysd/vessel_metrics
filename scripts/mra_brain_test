#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 29 10:46:40 2021

MRA brain test

@author: sean
"""

import nibabel as nib
import os 
import cv2
import matplotlib.pyplot as plt
import numpy as np
import vessel_metrics as vm
import glob, os
from timeit import default_timer as timer
from cv2_rolling_ball import subtract_background_rolling_ball
from skimage.filters import meijering, hessian, frangi, sato
from skimage.morphology import skeletonize
from scipy import stats
from scipy.spatial import distance
from skimage.draw import line
from copy import deepcopy

data_path = '/home/sean/Documents/vessel_metrics/data/brains/'
test_im = 'BH0003.nii.gz'

img = nib.load(os.path.join(data_path,test_im))
vol = img.dataobj
plt.figure; plt.imshow(vol[:,:,100])

img_chunk = vol[:,:,0:90]
proj = vm.czi_projection(img_chunk,2)
plt.imshow(proj)

proj = vm.normalize_contrast(proj)

preproc = vm.preprocess_seg(proj)
plt.imshow(preproc)

preproc2 = vm.preprocess_seg(proj, ball_size = 50, median_size=3)
plt.imshow(preproc2)

sato_im = sato(preproc2, sigmas = range(1,5,1), mode = 'reflect', black_ridges = False)
sato_norm = np.round(sato_im/np.max(sato_im)*255).astype(np.uint8)
plt.imshow(sato_norm)

sato_thresh = 25
sato_label = np.zeros_like(sato_norm)
sato_label[sato_norm>sato_thresh] =1
vm.overlay_segmentation(proj,sato_label)


preproc3 = vm.contrast_stretch(preproc2)
sato_im2 = sato(preproc3, sigmas = range(1,5,1), mode = 'reflect', black_ridges = False)
sato_norm2 = np.round(sato_im2/np.max(sato_im2)*255).astype(np.uint8)
plt.imshow(sato_norm2)

sato_thresh = 60
sato_label2 = np.zeros_like(sato_norm2)
sato_label2[sato_norm2>sato_thresh] =1
vm.overlay_segmentation(proj,sato_label2)

kernel = np.ones((3,3),np.uint8)
label = cv2.morphologyEx(sato_label.astype(np.uint8), cv2.MORPH_OPEN, kernel)
    
label = vm.remove_small_objects(label,size_thresh = 500)

skel = skeletonize(label)
edges , bp = vm.find_branchpoints(skel)

_, edge_labels = cv2.connectedComponents(edges)

full_viz, diameters = whole_anatomy_diameter(label, edge_labels)

overlay = label + full_viz + skel
vm.overlay_segmentation(proj, overlay)


def whole_anatomy_diameter(seg, edge_labels, minimum_length = 25, pad_size = 50): 
    unique_edges = np.unique(edge_labels)
    unique_edges = np.delete(unique_edges,0)
    
    edge_label_pad = np.pad(edge_labels,pad_size)
    seg_pad = np.pad(seg, pad_size)
    full_viz = np.zeros_like(seg_pad)
    diameters = []
    for i in unique_edges:
        seg_length = len(np.argwhere(edge_label_pad == i))
        if seg_length>minimum_length:
            _, temp_diam, temp_viz = visualize_vessel_diameter(edge_label_pad, i, seg_pad)
            diameters.append(temp_diam)
            full_viz = full_viz + temp_viz
    im_shape = edge_label_pad.shape
    full_viz_no_pad = full_viz[pad_size:im_shape[0]-pad_size,pad_size:im_shape[1]-pad_size]
    
    return full_viz_no_pad, diameters